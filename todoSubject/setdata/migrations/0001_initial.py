# Generated by Django 4.2.2 on 2023-06-28 17:09

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AuthGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, unique=True)),
            ],
            options={
                "db_table": "auth_group",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthGroupPermissions",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_group_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("codename", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "auth_permission",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("is_superuser", models.IntegerField()),
                ("username", models.CharField(max_length=150, unique=True)),
                ("first_name", models.CharField(max_length=150)),
                ("last_name", models.CharField(max_length=150)),
                ("email", models.CharField(max_length=254)),
                ("is_staff", models.IntegerField()),
                ("is_active", models.IntegerField()),
                ("date_joined", models.DateTimeField()),
            ],
            options={
                "db_table": "auth_user",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserGroups",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_user_groups",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserUserPermissions",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_user_user_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ColumnsPriv",
            fields=[
                (
                    "host",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_column="Host",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("db", models.CharField(db_column="Db", max_length=64)),
                ("user", models.CharField(db_column="User", max_length=32)),
                ("table_name", models.CharField(db_column="Table_name", max_length=64)),
                (
                    "column_name",
                    models.CharField(db_column="Column_name", max_length=64),
                ),
                ("timestamp", models.DateTimeField(db_column="Timestamp")),
                (
                    "column_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Column_priv",
                        max_length=31,
                    ),
                ),
            ],
            options={
                "db_table": "columns_priv",
                "db_table_comment": "Column privileges",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Component",
            fields=[
                ("component_id", models.AutoField(primary_key=True, serialize=False)),
                ("component_group_id", models.PositiveIntegerField()),
                ("component_urn", models.TextField()),
            ],
            options={
                "db_table": "component",
                "db_table_comment": "Components",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Db",
            fields=[
                (
                    "host",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_column="Host",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("db", models.CharField(db_column="Db", max_length=64)),
                ("user", models.CharField(db_column="User", max_length=32)),
                (
                    "select_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Select_priv",
                        max_length=1,
                    ),
                ),
                (
                    "insert_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Insert_priv",
                        max_length=1,
                    ),
                ),
                (
                    "update_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Update_priv",
                        max_length=1,
                    ),
                ),
                (
                    "delete_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Delete_priv",
                        max_length=1,
                    ),
                ),
                (
                    "create_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Create_priv",
                        max_length=1,
                    ),
                ),
                (
                    "drop_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Drop_priv",
                        max_length=1,
                    ),
                ),
                (
                    "grant_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Grant_priv",
                        max_length=1,
                    ),
                ),
                (
                    "references_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="References_priv",
                        max_length=1,
                    ),
                ),
                (
                    "index_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Index_priv",
                        max_length=1,
                    ),
                ),
                (
                    "alter_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Alter_priv",
                        max_length=1,
                    ),
                ),
                (
                    "create_tmp_table_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Create_tmp_table_priv",
                        max_length=1,
                    ),
                ),
                (
                    "lock_tables_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Lock_tables_priv",
                        max_length=1,
                    ),
                ),
                (
                    "create_view_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Create_view_priv",
                        max_length=1,
                    ),
                ),
                (
                    "show_view_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Show_view_priv",
                        max_length=1,
                    ),
                ),
                (
                    "create_routine_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Create_routine_priv",
                        max_length=1,
                    ),
                ),
                (
                    "alter_routine_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Alter_routine_priv",
                        max_length=1,
                    ),
                ),
                (
                    "execute_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Execute_priv",
                        max_length=1,
                    ),
                ),
                (
                    "event_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Event_priv",
                        max_length=1,
                    ),
                ),
                (
                    "trigger_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Trigger_priv",
                        max_length=1,
                    ),
                ),
            ],
            options={
                "db_table": "db",
                "db_table_comment": "Database privileges",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DefaultRoles",
            fields=[
                (
                    "host",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_column="HOST",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("user", models.CharField(db_column="USER", max_length=32)),
                (
                    "default_role_host",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_column="DEFAULT_ROLE_HOST",
                        max_length=255,
                    ),
                ),
                (
                    "default_role_user",
                    models.CharField(db_column="DEFAULT_ROLE_USER", max_length=32),
                ),
            ],
            options={
                "db_table": "default_roles",
                "db_table_comment": "Default roles",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoAdminLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action_time", models.DateTimeField()),
                ("object_id", models.TextField(blank=True, null=True)),
                ("object_repr", models.CharField(max_length=200)),
                ("action_flag", models.PositiveSmallIntegerField()),
                ("change_message", models.TextField()),
            ],
            options={
                "db_table": "django_admin_log",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoContentType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("app_label", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "django_content_type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoMigrations",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("app", models.CharField(max_length=255)),
                ("name", models.CharField(max_length=255)),
                ("applied", models.DateTimeField()),
            ],
            options={
                "db_table": "django_migrations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoSession",
            fields=[
                (
                    "session_key",
                    models.CharField(max_length=40, primary_key=True, serialize=False),
                ),
                ("session_data", models.TextField()),
                ("expire_date", models.DateTimeField()),
            ],
            options={
                "db_table": "django_session",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="EngineCost",
            fields=[
                ("engine_name", models.CharField(max_length=64)),
                ("device_type", models.IntegerField()),
                (
                    "cost_name",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("cost_value", models.FloatField(blank=True, null=True)),
                ("last_update", models.DateTimeField()),
                ("comment", models.CharField(blank=True, max_length=1024, null=True)),
                ("default_value", models.FloatField(blank=True, null=True)),
            ],
            options={
                "db_table": "engine_cost",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Func",
            fields=[
                (
                    "name",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("ret", models.IntegerField()),
                ("dl", models.CharField(max_length=128)),
                (
                    "type",
                    models.CharField(db_collation="utf8mb3_general_ci", max_length=9),
                ),
            ],
            options={
                "db_table": "func",
                "db_table_comment": "User defined functions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="GeneralLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("event_time", models.DateTimeField()),
                ("user_host", models.TextField()),
                ("thread_id", models.PositiveBigIntegerField()),
                ("server_id", models.PositiveIntegerField()),
                ("command_type", models.CharField(max_length=64)),
                ("argument", models.TextField()),
            ],
            options={
                "db_table": "general_log",
                "db_table_comment": "General log",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="GlobalGrants",
            fields=[
                (
                    "user",
                    models.CharField(
                        db_column="USER",
                        max_length=32,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "host",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_column="HOST",
                        max_length=255,
                    ),
                ),
                (
                    "priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="PRIV",
                        max_length=32,
                    ),
                ),
                (
                    "with_grant_option",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="WITH_GRANT_OPTION",
                        max_length=1,
                    ),
                ),
            ],
            options={
                "db_table": "global_grants",
                "db_table_comment": "Extended global grants",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="GtidExecuted",
            fields=[
                (
                    "source_uuid",
                    models.CharField(
                        db_comment="uuid of the source where the transaction was originally executed.",
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "interval_start",
                    models.BigIntegerField(db_comment="First number of interval."),
                ),
                (
                    "interval_end",
                    models.BigIntegerField(db_comment="Last number of interval."),
                ),
            ],
            options={
                "db_table": "gtid_executed",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="HelpCategory",
            fields=[
                (
                    "help_category_id",
                    models.PositiveSmallIntegerField(primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=64, unique=True)),
                (
                    "parent_category_id",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                ("url", models.TextField()),
            ],
            options={
                "db_table": "help_category",
                "db_table_comment": "help categories",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="HelpKeyword",
            fields=[
                (
                    "help_keyword_id",
                    models.PositiveIntegerField(primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=64, unique=True)),
            ],
            options={
                "db_table": "help_keyword",
                "db_table_comment": "help keywords",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="HelpRelation",
            fields=[
                ("help_topic_id", models.PositiveIntegerField()),
                (
                    "help_keyword_id",
                    models.PositiveIntegerField(primary_key=True, serialize=False),
                ),
            ],
            options={
                "db_table": "help_relation",
                "db_table_comment": "keyword-topic relation",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="HelpTopic",
            fields=[
                (
                    "help_topic_id",
                    models.PositiveIntegerField(primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=64, unique=True)),
                ("help_category_id", models.PositiveSmallIntegerField()),
                ("description", models.TextField()),
                ("example", models.TextField()),
                ("url", models.TextField()),
            ],
            options={
                "db_table": "help_topic",
                "db_table_comment": "help topics",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="InnodbIndexStats",
            fields=[
                (
                    "database_name",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("table_name", models.CharField(max_length=199)),
                ("index_name", models.CharField(max_length=64)),
                ("last_update", models.DateTimeField()),
                ("stat_name", models.CharField(max_length=64)),
                ("stat_value", models.PositiveBigIntegerField()),
                ("sample_size", models.PositiveBigIntegerField(blank=True, null=True)),
                ("stat_description", models.CharField(max_length=1024)),
            ],
            options={
                "db_table": "innodb_index_stats",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="InnodbTableStats",
            fields=[
                (
                    "database_name",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("table_name", models.CharField(max_length=199)),
                ("last_update", models.DateTimeField()),
                ("n_rows", models.PositiveBigIntegerField()),
                ("clustered_index_size", models.PositiveBigIntegerField()),
                ("sum_of_other_index_sizes", models.PositiveBigIntegerField()),
            ],
            options={
                "db_table": "innodb_table_stats",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="PasswordHistory",
            fields=[
                (
                    "host",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_column="Host",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("user", models.CharField(db_column="User", max_length=32)),
                (
                    "password_timestamp",
                    models.DateTimeField(db_column="Password_timestamp"),
                ),
                (
                    "password",
                    models.TextField(blank=True, db_column="Password", null=True),
                ),
            ],
            options={
                "db_table": "password_history",
                "db_table_comment": "Password history for user accounts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Plugin",
            fields=[
                (
                    "name",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("dl", models.CharField(max_length=128)),
            ],
            options={
                "db_table": "plugin",
                "db_table_comment": "MySQL plugins",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ProcsPriv",
            fields=[
                (
                    "host",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_column="Host",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("db", models.CharField(db_column="Db", max_length=64)),
                ("user", models.CharField(db_column="User", max_length=32)),
                (
                    "routine_name",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Routine_name",
                        max_length=64,
                    ),
                ),
                (
                    "routine_type",
                    models.CharField(db_column="Routine_type", max_length=9),
                ),
                ("grantor", models.CharField(db_column="Grantor", max_length=288)),
                (
                    "proc_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Proc_priv",
                        max_length=27,
                    ),
                ),
                ("timestamp", models.DateTimeField(db_column="Timestamp")),
            ],
            options={
                "db_table": "procs_priv",
                "db_table_comment": "Procedure privileges",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ProxiesPriv",
            fields=[
                (
                    "host",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_column="Host",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("user", models.CharField(db_column="User", max_length=32)),
                (
                    "proxied_host",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_column="Proxied_host",
                        max_length=255,
                    ),
                ),
                (
                    "proxied_user",
                    models.CharField(db_column="Proxied_user", max_length=32),
                ),
                ("with_grant", models.IntegerField(db_column="With_grant")),
                ("grantor", models.CharField(db_column="Grantor", max_length=288)),
                ("timestamp", models.DateTimeField(db_column="Timestamp")),
            ],
            options={
                "db_table": "proxies_priv",
                "db_table_comment": "User proxy privileges",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ReplicationAsynchronousConnectionFailover",
            fields=[
                (
                    "channel_name",
                    models.CharField(
                        db_column="Channel_name",
                        db_comment="The replication channel name that connects source and replica.",
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "host",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_column="Host",
                        db_comment="The source hostname that the replica will attempt to switch over the replication connection to in case of a failure.",
                        max_length=255,
                    ),
                ),
                (
                    "port",
                    models.PositiveIntegerField(
                        db_column="Port",
                        db_comment="The source port that the replica will attempt to switch over the replication connection to in case of a failure.",
                    ),
                ),
                (
                    "network_namespace",
                    models.CharField(
                        db_column="Network_namespace",
                        db_comment="The source network namespace that the replica will attempt to switch over the replication connection to in case of a failure. If its value is empty, connections use the default (global) namespace.",
                        max_length=64,
                    ),
                ),
                (
                    "weight",
                    models.PositiveIntegerField(
                        db_column="Weight",
                        db_comment="The order in which the replica shall try to switch the connection over to when there are failures. Weight can be set to a number between 1 and 100, where 100 is the highest weight and 1 the lowest.",
                    ),
                ),
                (
                    "managed_name",
                    models.CharField(
                        db_column="Managed_name",
                        db_comment="The name of the group which this server belongs to.",
                        max_length=64,
                    ),
                ),
            ],
            options={
                "db_table": "replication_asynchronous_connection_failover",
                "db_table_comment": "The source configuration details",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ReplicationAsynchronousConnectionFailoverManaged",
            fields=[
                (
                    "channel_name",
                    models.CharField(
                        db_column="Channel_name",
                        db_comment="The replication channel name that connects source and replica.",
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "managed_name",
                    models.CharField(
                        db_column="Managed_name",
                        db_comment="The name of the source which needs to be managed.",
                        max_length=64,
                    ),
                ),
                (
                    "managed_type",
                    models.CharField(
                        db_column="Managed_type",
                        db_comment="Determines the managed type.",
                        max_length=64,
                    ),
                ),
                (
                    "configuration",
                    models.JSONField(
                        blank=True,
                        db_column="Configuration",
                        db_comment='The data to help manage group. For Managed_type = GroupReplication, Configuration value should contain {"Primary_weight": 80, "Secondary_weight": 60}, so that it assigns weight=80 to PRIMARY of the group, and weight=60 for rest of the members in mysql.replication_asynchronous_connection_failover table.',
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "replication_asynchronous_connection_failover_managed",
                "db_table_comment": "The managed source configuration details",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ReplicationGroupConfigurationVersion",
            fields=[
                (
                    "name",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_comment="The configuration name.",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "version",
                    models.PositiveBigIntegerField(
                        db_comment="The version of the configuration name."
                    ),
                ),
            ],
            options={
                "db_table": "replication_group_configuration_version",
                "db_table_comment": "The group configuration version.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ReplicationGroupMemberActions",
            fields=[
                (
                    "name",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_comment="The action name.",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "event",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_comment="The event that will trigger the action.",
                        max_length=64,
                    ),
                ),
                (
                    "enabled",
                    models.IntegerField(db_comment="Whether the action is enabled."),
                ),
                (
                    "type",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_comment="The action type.",
                        max_length=64,
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(
                        db_comment="The order on which the action will be run, value between 1 and 100, lower values first."
                    ),
                ),
                (
                    "error_handling",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_comment="On errors during the action will be handled: IGNORE, CRITICAL.",
                        max_length=64,
                    ),
                ),
            ],
            options={
                "db_table": "replication_group_member_actions",
                "db_table_comment": "The member actions configuration.",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="RoleEdges",
            fields=[
                (
                    "from_host",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_column="FROM_HOST",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("from_user", models.CharField(db_column="FROM_USER", max_length=32)),
                (
                    "to_host",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_column="TO_HOST",
                        max_length=255,
                    ),
                ),
                ("to_user", models.CharField(db_column="TO_USER", max_length=32)),
                (
                    "with_admin_option",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="WITH_ADMIN_OPTION",
                        max_length=1,
                    ),
                ),
            ],
            options={
                "db_table": "role_edges",
                "db_table_comment": "Role hierarchy and role grants",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="ServerCost",
            fields=[
                (
                    "cost_name",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("cost_value", models.FloatField(blank=True, null=True)),
                ("last_update", models.DateTimeField()),
                ("comment", models.CharField(blank=True, max_length=1024, null=True)),
                ("default_value", models.FloatField(blank=True, null=True)),
            ],
            options={
                "db_table": "server_cost",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Servers",
            fields=[
                (
                    "server_name",
                    models.CharField(
                        db_column="Server_name",
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "host",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_column="Host",
                        max_length=255,
                    ),
                ),
                ("db", models.CharField(db_column="Db", max_length=64)),
                ("username", models.CharField(db_column="Username", max_length=64)),
                ("password", models.CharField(db_column="Password", max_length=64)),
                ("port", models.IntegerField(db_column="Port")),
                ("socket", models.CharField(db_column="Socket", max_length=64)),
                ("wrapper", models.CharField(db_column="Wrapper", max_length=64)),
                ("owner", models.CharField(db_column="Owner", max_length=64)),
            ],
            options={
                "db_table": "servers",
                "db_table_comment": "MySQL Foreign Servers table",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Setdata",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("email", models.CharField(max_length=255, unique=True)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "SetData",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SlaveMasterInfo",
            fields=[
                (
                    "number_of_lines",
                    models.PositiveIntegerField(
                        db_column="Number_of_lines",
                        db_comment="Number of lines in the file.",
                    ),
                ),
                (
                    "master_log_name",
                    models.TextField(
                        db_collation="utf8mb3_bin",
                        db_column="Master_log_name",
                        db_comment="The name of the master binary log currently being read from the master.",
                    ),
                ),
                (
                    "master_log_pos",
                    models.PositiveBigIntegerField(
                        db_column="Master_log_pos",
                        db_comment="The master log position of the last read event.",
                    ),
                ),
                (
                    "host",
                    models.CharField(
                        blank=True,
                        db_collation="ascii_general_ci",
                        db_column="Host",
                        db_comment="The host name of the source.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "user_name",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="User_name",
                        db_comment="The user name used to connect to the master.",
                        null=True,
                    ),
                ),
                (
                    "user_password",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="User_password",
                        db_comment="The password used to connect to the master.",
                        null=True,
                    ),
                ),
                (
                    "port",
                    models.PositiveIntegerField(
                        db_column="Port",
                        db_comment="The network port used to connect to the master.",
                    ),
                ),
                (
                    "connect_retry",
                    models.PositiveIntegerField(
                        db_column="Connect_retry",
                        db_comment="The period (in seconds) that the slave will wait before trying to reconnect to the master.",
                    ),
                ),
                (
                    "enabled_ssl",
                    models.IntegerField(
                        db_column="Enabled_ssl",
                        db_comment="Indicates whether the server supports SSL connections.",
                    ),
                ),
                (
                    "ssl_ca",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Ssl_ca",
                        db_comment="The file used for the Certificate Authority (CA) certificate.",
                        null=True,
                    ),
                ),
                (
                    "ssl_capath",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Ssl_capath",
                        db_comment="The path to the Certificate Authority (CA) certificates.",
                        null=True,
                    ),
                ),
                (
                    "ssl_cert",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Ssl_cert",
                        db_comment="The name of the SSL certificate file.",
                        null=True,
                    ),
                ),
                (
                    "ssl_cipher",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Ssl_cipher",
                        db_comment="The name of the cipher in use for the SSL connection.",
                        null=True,
                    ),
                ),
                (
                    "ssl_key",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Ssl_key",
                        db_comment="The name of the SSL key file.",
                        null=True,
                    ),
                ),
                (
                    "ssl_verify_server_cert",
                    models.IntegerField(
                        db_column="Ssl_verify_server_cert",
                        db_comment="Whether to verify the server certificate.",
                    ),
                ),
                ("heartbeat", models.FloatField(db_column="Heartbeat")),
                (
                    "bind",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Bind",
                        db_comment="Displays which interface is employed when connecting to the MySQL server",
                        null=True,
                    ),
                ),
                (
                    "ignored_server_ids",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Ignored_server_ids",
                        db_comment="The number of server IDs to be ignored, followed by the actual server IDs",
                        null=True,
                    ),
                ),
                (
                    "uuid",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Uuid",
                        db_comment="The master server uuid.",
                        null=True,
                    ),
                ),
                (
                    "retry_count",
                    models.PositiveBigIntegerField(
                        db_column="Retry_count",
                        db_comment="Number of reconnect attempts, to the master, before giving up.",
                    ),
                ),
                (
                    "ssl_crl",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Ssl_crl",
                        db_comment="The file used for the Certificate Revocation List (CRL)",
                        null=True,
                    ),
                ),
                (
                    "ssl_crlpath",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Ssl_crlpath",
                        db_comment="The path used for Certificate Revocation List (CRL) files",
                        null=True,
                    ),
                ),
                (
                    "enabled_auto_position",
                    models.IntegerField(
                        db_column="Enabled_auto_position",
                        db_comment="Indicates whether GTIDs will be used to retrieve events from the master.",
                    ),
                ),
                (
                    "channel_name",
                    models.CharField(
                        db_column="Channel_name",
                        db_comment="The channel on which the replica is connected to a source. Used in Multisource Replication",
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "tls_version",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Tls_version",
                        db_comment="Tls version",
                        null=True,
                    ),
                ),
                (
                    "public_key_path",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Public_key_path",
                        db_comment="The file containing public key of master server.",
                        null=True,
                    ),
                ),
                (
                    "get_public_key",
                    models.IntegerField(
                        db_column="Get_public_key",
                        db_comment="Preference to get public key from master.",
                    ),
                ),
                (
                    "network_namespace",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Network_namespace",
                        db_comment="Network namespace used for communication with the master server.",
                        null=True,
                    ),
                ),
                (
                    "master_compression_algorithm",
                    models.CharField(
                        db_collation="utf8mb3_bin",
                        db_column="Master_compression_algorithm",
                        db_comment="Compression algorithm supported for data transfer between source and replica.",
                        max_length=64,
                    ),
                ),
                (
                    "master_zstd_compression_level",
                    models.PositiveIntegerField(
                        db_column="Master_zstd_compression_level",
                        db_comment="Compression level associated with zstd compression algorithm.",
                    ),
                ),
                (
                    "tls_ciphersuites",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Tls_ciphersuites",
                        db_comment="Ciphersuites used for TLS 1.3 communication with the master server.",
                        null=True,
                    ),
                ),
                (
                    "source_connection_auto_failover",
                    models.IntegerField(
                        db_column="Source_connection_auto_failover",
                        db_comment="Indicates whether the channel connection failover is enabled.",
                    ),
                ),
                (
                    "gtid_only",
                    models.IntegerField(
                        db_column="Gtid_only",
                        db_comment="Indicates if this channel only uses GTIDs and does not persist positions.",
                    ),
                ),
            ],
            options={
                "db_table": "slave_master_info",
                "db_table_comment": "Master Information",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SlaveRelayLogInfo",
            fields=[
                (
                    "number_of_lines",
                    models.PositiveIntegerField(
                        db_column="Number_of_lines",
                        db_comment="Number of lines in the file or rows in the table. Used to version table definitions.",
                    ),
                ),
                (
                    "relay_log_name",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Relay_log_name",
                        db_comment="The name of the current relay log file.",
                        null=True,
                    ),
                ),
                (
                    "relay_log_pos",
                    models.PositiveBigIntegerField(
                        blank=True,
                        db_column="Relay_log_pos",
                        db_comment="The relay log position of the last executed event.",
                        null=True,
                    ),
                ),
                (
                    "master_log_name",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Master_log_name",
                        db_comment="The name of the master binary log file from which the events in the relay log file were read.",
                        null=True,
                    ),
                ),
                (
                    "master_log_pos",
                    models.PositiveBigIntegerField(
                        blank=True,
                        db_column="Master_log_pos",
                        db_comment="The master log position of the last executed event.",
                        null=True,
                    ),
                ),
                (
                    "sql_delay",
                    models.IntegerField(
                        blank=True,
                        db_column="Sql_delay",
                        db_comment="The number of seconds that the slave must lag behind the master.",
                        null=True,
                    ),
                ),
                (
                    "number_of_workers",
                    models.PositiveIntegerField(
                        blank=True, db_column="Number_of_workers", null=True
                    ),
                ),
                (
                    "id",
                    models.PositiveIntegerField(
                        blank=True,
                        db_column="Id",
                        db_comment="Internal Id that uniquely identifies this record.",
                        null=True,
                    ),
                ),
                (
                    "channel_name",
                    models.CharField(
                        db_column="Channel_name",
                        db_comment="The channel on which the replica is connected to a source. Used in Multisource Replication",
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "privilege_checks_username",
                    models.CharField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Privilege_checks_username",
                        db_comment="Username part of PRIVILEGE_CHECKS_USER.",
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "privilege_checks_hostname",
                    models.CharField(
                        blank=True,
                        db_collation="ascii_general_ci",
                        db_column="Privilege_checks_hostname",
                        db_comment="Hostname part of PRIVILEGE_CHECKS_USER.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "require_row_format",
                    models.IntegerField(
                        db_column="Require_row_format",
                        db_comment="Indicates whether the channel shall only accept row based events.",
                    ),
                ),
                (
                    "require_table_primary_key_check",
                    models.CharField(
                        db_column="Require_table_primary_key_check",
                        db_comment="Indicates what is the channel policy regarding tables without primary keys on create and alter table queries",
                        max_length=8,
                    ),
                ),
                (
                    "assign_gtids_to_anonymous_transactions_type",
                    models.CharField(
                        db_column="Assign_gtids_to_anonymous_transactions_type",
                        db_comment="Indicates whether the channel will generate a new GTID for anonymous transactions. OFF means that anonymous transactions will remain anonymous. LOCAL means that anonymous transactions will be assigned a newly generated GTID based on server_uuid. UUID indicates that anonymous transactions will be assigned a newly generated GTID based on Assign_gtids_to_anonymous_transactions_value",
                        max_length=5,
                    ),
                ),
                (
                    "assign_gtids_to_anonymous_transactions_value",
                    models.TextField(
                        blank=True,
                        db_collation="utf8mb3_bin",
                        db_column="Assign_gtids_to_anonymous_transactions_value",
                        db_comment="Indicates the UUID used while generating GTIDs for anonymous transactions",
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "slave_relay_log_info",
                "db_table_comment": "Relay Log Information",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SlaveWorkerInfo",
            fields=[
                ("id", models.PositiveIntegerField(db_column="Id")),
                (
                    "relay_log_name",
                    models.TextField(
                        db_collation="utf8mb3_bin", db_column="Relay_log_name"
                    ),
                ),
                (
                    "relay_log_pos",
                    models.PositiveBigIntegerField(db_column="Relay_log_pos"),
                ),
                (
                    "master_log_name",
                    models.TextField(
                        db_collation="utf8mb3_bin", db_column="Master_log_name"
                    ),
                ),
                (
                    "master_log_pos",
                    models.PositiveBigIntegerField(db_column="Master_log_pos"),
                ),
                (
                    "checkpoint_relay_log_name",
                    models.TextField(
                        db_collation="utf8mb3_bin",
                        db_column="Checkpoint_relay_log_name",
                    ),
                ),
                (
                    "checkpoint_relay_log_pos",
                    models.PositiveBigIntegerField(
                        db_column="Checkpoint_relay_log_pos"
                    ),
                ),
                (
                    "checkpoint_master_log_name",
                    models.TextField(
                        db_collation="utf8mb3_bin",
                        db_column="Checkpoint_master_log_name",
                    ),
                ),
                (
                    "checkpoint_master_log_pos",
                    models.PositiveBigIntegerField(
                        db_column="Checkpoint_master_log_pos"
                    ),
                ),
                (
                    "checkpoint_seqno",
                    models.PositiveIntegerField(db_column="Checkpoint_seqno"),
                ),
                (
                    "checkpoint_group_size",
                    models.PositiveIntegerField(db_column="Checkpoint_group_size"),
                ),
                (
                    "checkpoint_group_bitmap",
                    models.TextField(db_column="Checkpoint_group_bitmap"),
                ),
                (
                    "channel_name",
                    models.CharField(
                        db_column="Channel_name",
                        db_comment="The channel on which the replica is connected to a source. Used in Multisource Replication",
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
            ],
            options={
                "db_table": "slave_worker_info",
                "db_table_comment": "Worker Information",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="SlowLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_time", models.DateTimeField()),
                ("user_host", models.TextField()),
                ("query_time", models.TimeField()),
                ("lock_time", models.TimeField()),
                ("rows_sent", models.IntegerField()),
                ("rows_examined", models.IntegerField()),
                ("db", models.CharField(max_length=512)),
                ("last_insert_id", models.IntegerField()),
                ("insert_id", models.IntegerField()),
                ("server_id", models.PositiveIntegerField()),
                ("sql_text", models.TextField()),
                ("thread_id", models.PositiveBigIntegerField()),
            ],
            options={
                "db_table": "slow_log",
                "db_table_comment": "Slow log",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TablesPriv",
            fields=[
                (
                    "host",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_column="Host",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("db", models.CharField(db_column="Db", max_length=64)),
                ("user", models.CharField(db_column="User", max_length=32)),
                ("table_name", models.CharField(db_column="Table_name", max_length=64)),
                ("grantor", models.CharField(db_column="Grantor", max_length=288)),
                ("timestamp", models.DateTimeField(db_column="Timestamp")),
                (
                    "table_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Table_priv",
                        max_length=98,
                    ),
                ),
                (
                    "column_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Column_priv",
                        max_length=31,
                    ),
                ),
            ],
            options={
                "db_table": "tables_priv",
                "db_table_comment": "Table privileges",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TimeZone",
            fields=[
                (
                    "time_zone_id",
                    models.AutoField(
                        db_column="Time_zone_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "use_leap_seconds",
                    models.CharField(db_column="Use_leap_seconds", max_length=1),
                ),
            ],
            options={
                "db_table": "time_zone",
                "db_table_comment": "Time zones",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TimeZoneLeapSecond",
            fields=[
                (
                    "transition_time",
                    models.BigIntegerField(
                        db_column="Transition_time", primary_key=True, serialize=False
                    ),
                ),
                ("correction", models.IntegerField(db_column="Correction")),
            ],
            options={
                "db_table": "time_zone_leap_second",
                "db_table_comment": "Leap seconds information for time zones",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TimeZoneName",
            fields=[
                (
                    "name",
                    models.CharField(
                        db_column="Name",
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("time_zone_id", models.PositiveIntegerField(db_column="Time_zone_id")),
            ],
            options={
                "db_table": "time_zone_name",
                "db_table_comment": "Time zone names",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TimeZoneTransition",
            fields=[
                (
                    "time_zone_id",
                    models.PositiveIntegerField(
                        db_column="Time_zone_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "transition_time",
                    models.BigIntegerField(db_column="Transition_time"),
                ),
                (
                    "transition_type_id",
                    models.PositiveIntegerField(db_column="Transition_type_id"),
                ),
            ],
            options={
                "db_table": "time_zone_transition",
                "db_table_comment": "Time zone transitions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TimeZoneTransitionType",
            fields=[
                (
                    "time_zone_id",
                    models.PositiveIntegerField(
                        db_column="Time_zone_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "transition_type_id",
                    models.PositiveIntegerField(db_column="Transition_type_id"),
                ),
                ("offset", models.IntegerField(db_column="Offset")),
                ("is_dst", models.PositiveIntegerField(db_column="Is_DST")),
                (
                    "abbreviation",
                    models.CharField(db_column="Abbreviation", max_length=8),
                ),
            ],
            options={
                "db_table": "time_zone_transition_type",
                "db_table_comment": "Time zone transition types",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "host",
                    models.CharField(
                        db_collation="ascii_general_ci",
                        db_column="Host",
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("user", models.CharField(db_column="User", max_length=32)),
                (
                    "select_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Select_priv",
                        max_length=1,
                    ),
                ),
                (
                    "insert_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Insert_priv",
                        max_length=1,
                    ),
                ),
                (
                    "update_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Update_priv",
                        max_length=1,
                    ),
                ),
                (
                    "delete_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Delete_priv",
                        max_length=1,
                    ),
                ),
                (
                    "create_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Create_priv",
                        max_length=1,
                    ),
                ),
                (
                    "drop_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Drop_priv",
                        max_length=1,
                    ),
                ),
                (
                    "reload_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Reload_priv",
                        max_length=1,
                    ),
                ),
                (
                    "shutdown_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Shutdown_priv",
                        max_length=1,
                    ),
                ),
                (
                    "process_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Process_priv",
                        max_length=1,
                    ),
                ),
                (
                    "file_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="File_priv",
                        max_length=1,
                    ),
                ),
                (
                    "grant_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Grant_priv",
                        max_length=1,
                    ),
                ),
                (
                    "references_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="References_priv",
                        max_length=1,
                    ),
                ),
                (
                    "index_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Index_priv",
                        max_length=1,
                    ),
                ),
                (
                    "alter_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Alter_priv",
                        max_length=1,
                    ),
                ),
                (
                    "show_db_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Show_db_priv",
                        max_length=1,
                    ),
                ),
                (
                    "super_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Super_priv",
                        max_length=1,
                    ),
                ),
                (
                    "create_tmp_table_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Create_tmp_table_priv",
                        max_length=1,
                    ),
                ),
                (
                    "lock_tables_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Lock_tables_priv",
                        max_length=1,
                    ),
                ),
                (
                    "execute_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Execute_priv",
                        max_length=1,
                    ),
                ),
                (
                    "repl_slave_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Repl_slave_priv",
                        max_length=1,
                    ),
                ),
                (
                    "repl_client_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Repl_client_priv",
                        max_length=1,
                    ),
                ),
                (
                    "create_view_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Create_view_priv",
                        max_length=1,
                    ),
                ),
                (
                    "show_view_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Show_view_priv",
                        max_length=1,
                    ),
                ),
                (
                    "create_routine_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Create_routine_priv",
                        max_length=1,
                    ),
                ),
                (
                    "alter_routine_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Alter_routine_priv",
                        max_length=1,
                    ),
                ),
                (
                    "create_user_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Create_user_priv",
                        max_length=1,
                    ),
                ),
                (
                    "event_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Event_priv",
                        max_length=1,
                    ),
                ),
                (
                    "trigger_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Trigger_priv",
                        max_length=1,
                    ),
                ),
                (
                    "create_tablespace_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Create_tablespace_priv",
                        max_length=1,
                    ),
                ),
                (
                    "ssl_type",
                    models.CharField(db_collation="utf8mb3_general_ci", max_length=9),
                ),
                ("ssl_cipher", models.TextField()),
                ("x509_issuer", models.TextField()),
                ("x509_subject", models.TextField()),
                ("max_questions", models.PositiveIntegerField()),
                ("max_updates", models.PositiveIntegerField()),
                ("max_connections", models.PositiveIntegerField()),
                ("max_user_connections", models.PositiveIntegerField()),
                ("plugin", models.CharField(max_length=64)),
                ("authentication_string", models.TextField(blank=True, null=True)),
                (
                    "password_expired",
                    models.CharField(db_collation="utf8mb3_general_ci", max_length=1),
                ),
                ("password_last_changed", models.DateTimeField(blank=True, null=True)),
                (
                    "password_lifetime",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    "account_locked",
                    models.CharField(db_collation="utf8mb3_general_ci", max_length=1),
                ),
                (
                    "create_role_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Create_role_priv",
                        max_length=1,
                    ),
                ),
                (
                    "drop_role_priv",
                    models.CharField(
                        db_collation="utf8mb3_general_ci",
                        db_column="Drop_role_priv",
                        max_length=1,
                    ),
                ),
                (
                    "password_reuse_history",
                    models.PositiveSmallIntegerField(
                        blank=True, db_column="Password_reuse_history", null=True
                    ),
                ),
                (
                    "password_reuse_time",
                    models.PositiveSmallIntegerField(
                        blank=True, db_column="Password_reuse_time", null=True
                    ),
                ),
                (
                    "password_require_current",
                    models.CharField(
                        blank=True,
                        db_collation="utf8mb3_general_ci",
                        db_column="Password_require_current",
                        max_length=1,
                        null=True,
                    ),
                ),
                (
                    "user_attributes",
                    models.JSONField(
                        blank=True, db_column="User_attributes", null=True
                    ),
                ),
            ],
            options={
                "db_table": "user",
                "db_table_comment": "Users and global privileges",
                "managed": False,
            },
        ),
    ]
